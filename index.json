[{"content":"개요 AR 오브젝트와 실제 공간이 동기화되어 움직이는 신개념 AR 콘텐츠\n기본정보 개발인원 / 기간 2명(개발1, 디자인1) / 20.11~21.04(6개월) 개발 환경 Unity3D, Vuforia SDK, Android 기능 Unity3D 시스템 / Object Detection/tracking / Shader, Particle 시스템 역할 / 기여도 메인 개발자 / 50% 개발 목적 회사 신규 IP 개발, 교육 사업 콘텐츠 개발,AR 응용 기술력 확보 아이디어 디자이너와 함께 생각되는 아이디어를 직접 그려보며 브레인스토밍을 통해 아이디어를 구체화 하였습니다. 기존의 모니터에서만 존재하던 AR 콘텐츠를 넘어서 실제 접촉가능한 물체와 AR오브젝트가 동시에 움직인다면 더 신기한 사용자 경험을 제공할 수 있지 않을까 생각하게 된 아이디어였습니다.\n주요 결과물 시연영상 : https://www.youtube.com/watch?v=fD2mmF4WhxY APK : https://drive.google.com/u/1/uc?id=1mZ0Hef_GeA39Ux0wbl5FTkl7hMTPxSwF\u0026amp;export=download 주요 코드 SceneTouch.cs 화학 콘텐츠에서 주변의 화학물질을 고를때 사용자 인터페이스 구현\npublic class SceneTouch : MonoBehaviour { public UIManager _UIM; public Transform Top; public Transform Bottom; public Transform Left; public Transform Right; public Text Debuging; Vector2 preclickpos = Vector2.zero; float speed = 0.5f; float zoom_speed = 0.05f; float now_Scale = 0.15f; private float std_height; private float std_width; //초기 해상도 대응 void Start() { std_height = (-41f * (Screen.height / 1920f)); std_width = (-40f * (Screen.width / 1080f)); } void Update() { Vector3 finalPos = Vector3.zero; //유니티 에디터 테스트용 구현 #if UNITY_EDITOR if (Input.GetMouseButton(0)) { Vector2 clickpos = Input.mousePosition; if (preclickpos == Vector2.zero) preclickpos = clickpos; Vector2 deltapos = (preclickpos - clickpos) * speed; //시점 변경 Vector3 TopPos = Camera.main.WorldToViewportPoint(Top.position); Vector3 BottomPos = Camera.main.WorldToViewportPoint(Bottom.position); Vector3 LeftPos = Camera.main.WorldToViewportPoint(Left.position); Vector3 RightPos = Camera.main.WorldToViewportPoint(Right.position); Debug.Log(RightPos.x + \u0026#34; / \u0026#34; + std_width); if (LeftPos.x \u0026lt; 0f) { Debug.Log(\u0026#34;Left Over\u0026#34;); deltapos.x = 1; } if (RightPos.x \u0026gt;= -41f) { Debug.Log(\u0026#34;Right Over\u0026#34;); deltapos.x = -1; } if (BottomPos.y \u0026lt; 0f) { Debug.Log(\u0026#34;Bottom Over\u0026#34;); deltapos.y = 1; } if (TopPos.y \u0026gt;= std_height) { Debug.Log(\u0026#34;Top Over\u0026#34;); deltapos.y = -1; } //Debug.Log(deltapos); preclickpos = clickpos; finalPos = _UIM.PicTotal_Trans.position - new Vector3(deltapos.x, deltapos.y, _UIM.PicTotal_Trans.position.z); _UIM.PicTotal_Trans.position = finalPos; } else { preclickpos = Vector2.zero; } //줌 기능 구현 if (Input.GetAxis(\u0026#34;Mouse ScrollWheel\u0026#34;) \u0026lt; 0) { // Zoom Out _UIM.Gesture_icon.SetActive(false); if (_UIM.PicTotal_Trans.localScale.x \u0026gt;= 0.15f) { now_Scale -= zoom_speed; _UIM.PicTotal_Trans.localScale = new Vector3(now_Scale, now_Scale, now_Scale); } } if (Input.GetAxis(\u0026#34;Mouse ScrollWheel\u0026#34;) \u0026gt; 0) { // Zoom In _UIM.Gesture_icon.SetActive(false); now_Scale += zoom_speed; _UIM.PicTotal_Trans.localScale = new Vector3(now_Scale, now_Scale, now_Scale); } #endif //모바일 환경 기능 구현 #if UNITY_ANDROID Transform trans = _UIM.PicTotal_Trans.transform; float coe = 0.001f; //손가락 1개 이동 기능 구현 if (Input.touchCount == 1) { _UIM.Gesture_icon.SetActive(false); Touch touchZero = Input.GetTouch(0); Vector2 pos = touchZero.deltaPosition; Debuging.text = (trans.localPosition.x).ToString() + \u0026#34; / \u0026#34; + (trans.localPosition.y).ToString() + \u0026#34; / \u0026#34; + (trans.localPosition.z).ToString(); if (trans.localPosition.x \u0026gt;= 800f) { pos.x = -3; } else if (trans.localPosition.x \u0026lt;= -800f) { pos.x = 3; } if (trans.localPosition.y \u0026gt;= 500f) { pos.y = -3; } else if (trans.localPosition.y \u0026lt;= -500f) { pos.y = 3; } _UIM.PicTotal_Trans.position = _UIM.PicTotal_Trans.position + new Vector3(pos.x, pos.y, _UIM.PicTotal_Trans.position.z); } //줌 확대 축소 구현 if (Input.touchCount == 2) //손가락 2개가 눌렸을 때 { Touch touchZero = Input.GetTouch(0); //첫번째 손가락 터치를 저장 Touch touchOne = Input.GetTouch(1); //두번째 손가락 터치를 저장 //터치에 대한 이전 위치값을 각각 저장함 //처음 터치한 위치(touchZero.position)에서 이전 프레임에서의 터치 위치와 이번 프로임에서 터치 위치의 차이를 뺌 Vector2 touchZeroPrevPos = touchZero.position - touchZero.deltaPosition; //deltaPosition는 이동방향 추적할 때 사용 Vector2 touchOnePrevPos = touchOne.position - touchOne.deltaPosition; // 각 프레임에서 터치 사이의 벡터 거리 구함 float prevTouchDeltaMag = (touchZeroPrevPos - touchOnePrevPos).magnitude; //magnitude는 두 점간의 거리 비교(벡터) float touchDeltaMag = (touchZero.position - touchOne.position).magnitude; // 거리 차이 구함(거리가 이전보다 크면(마이너스가 나오면)손가락을 벌린 상태_줌인 상태) float deltaMagnitudeDiff = prevTouchDeltaMag - touchDeltaMag; if (trans.localScale.x \u0026gt;= 0.15f) { trans.localScale = new Vector3(trans.localScale.x - (deltaMagnitudeDiff * coe), trans.localScale.y - (deltaMagnitudeDiff * coe), trans.localScale.z - (deltaMagnitudeDiff * coe)); } else { trans.localScale = new Vector3(0.15f, 0.15f, 0.15f); } } #endif } } LunarChecker.cs AR의 오브젝트들이 월식 상황으로 되어있는지 확인하는 함수\npublic class LunarChecker : MonoBehaviour { private RaycastHit hit; public bool isHitPart; public bool isHitTotal; public Color RayColor; public LayerMask PARTLM; public LayerMask TOTALLM; public Transform SunSpere; public Transform MoonSpere; public Transform EarthSpere; public string eclipseLv = \u0026#34;none\u0026#34;; float MaxDistance = 100f; // Update is called once per frame void Update() { Debug.DrawRay(transform.position, -transform.forward * MaxDistance, RayColor, 0.3f); //지구 시점에서 달의 부분 월식 범위 이상 가려져 있는지 확인 if (Physics.Raycast(transform.position, -transform.forward, out hit, MaxDistance, PARTLM)) { if (hit.collider.gameObject.tag == \u0026#34;Moon\u0026#34;) { isHitPart = true; //moonCol.radius = 0.3f; } else { isHitPart = false; } } //지구 시점에서 달의 개기 월식 범위 이상 가려져 있는지 확인 if (Physics.Raycast(transform.position, -transform.forward, out hit, MaxDistance, TOTALLM)) { if (hit.collider.gameObject.tag == \u0026#34;Moon\u0026#34;) { isHitTotal = true; } else { isHitTotal = false; //moonCol.radius = 1.3f; } } StatueUpdater(); float offsetX = SunSpere.position.x - EarthSpere.position.x; float offsetZ = SunSpere.position.z - EarthSpere.position.z; float offsetY = EarthSpere.position.y - MoonSpere.position.y; transform.LookAt(new Vector3(EarthSpere.position.x+offsetX,EarthSpere.position.y+offsetY,EarthSpere.position.z + offsetZ)); } public void StatueUpdater() { //현재 월식 상황 업데이트 if (isHitPart) { if (!isHitTotal) { eclipseLv = \u0026#34;Partial\u0026#34;; } else { eclipseLv = \u0026#34;Total\u0026#34;; } } else { eclipseLv = \u0026#34;none\u0026#34;; } isHitPart = false; isHitTotal = false; } public int pic_checker() { int result = 0; switch (eclipseLv) { case \u0026#34;none\u0026#34;: result = 0; break; case \u0026#34;Partial\u0026#34;: result = 2; break; case \u0026#34;Total\u0026#34;: result = 1; break; } return result; } } ","permalink":"https://beargrllys.github.io/project/dreamcube/","summary":"개요 AR 오브젝트와 실제 공간이 동기화되어 움직이는 신개념 AR 콘텐츠\n기본정보 개발인원 / 기간 2명(개발1, 디자인1) / 20.11~21.04(6개월) 개발 환경 Unity3D, Vuforia SDK, Android 기능 Unity3D 시스템 / Object Detection/tracking / Shader, Particle 시스템 역할 / 기여도 메인 개발자 / 50% 개발 목적 회사 신규 IP 개발, 교육 사업 콘텐츠 개발,AR 응용 기술력 확보 아이디어 디자이너와 함께 생각되는 아이디어를 직접 그려보며 브레인스토밍을 통해 아이디어를 구체화 하였습니다. 기존의 모니터에서만 존재하던 AR 콘텐츠를 넘어서 실제 접촉가능한 물체와 AR오브젝트가 동시에 움직인다면 더 신기한 사용자 경험을 제공할 수 있지 않을까 생각하게 된 아이디어였습니다.","title":"드림큐브"},{"content":"개요 Kinect V2를 이용해 제작한 실감형 미니게임 콘텐츠 개발\n기본정보 개발인원 / 기간 3명(기획1, 개발1, 디자인1) / 21.10~21.12(3개월) 개발 환경 Unity3D, Kinect V2 SDK, Window 기능 Unity3D 시스템 / Body Tracking / Kinect 디바이스 연동 / Firebase를 이용한 랭크 시스템 역할 / 기여도 메인 개발자 / 40% 개발 목적 교내 프로젝트, GGC 게임컨테스트 출품용 아이디어 기획자와 디자이너와 브레인스토밍을 통해 미니게임 모음집 아이디어로 의견을 모으고 구현가능한 다양한 게임들을 기획했습니다. 이후 개발난이도를 분류하고 1주 1게임을 목표로 기한 내에 최대한 많은 게임이 확보되도록 계획을 수립했습니다. Github의 Project 기능을 활용해 팀원들의 일정을 관리했습니다.\n주요 결과물 시연영상 : https://www.youtube.com/watch?v=OM-PopWtTVA APK : https://github.com/beargrllys/VirtualReality/releases/tag/Execute_File 소스코드 : https://github.com/beargrllys/DepthGame 주요 코드 Kinect V2를 이용해 제작한 실감형 미니게임 콘텐츠 개발\n3D 트래킹 - 2D UI 해석 코드 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/BodyTracker.cs 게임 시작 코드 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/AnimationController.cs 게임 랜덤 실행 코드 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/GameManage.cs 주먹 피하기 게임 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/AvoidPunch.cs 청기백기 게임 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/FlagGame.cs 무궁화 게임 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/MuGungHwa.cs OX퀴즈 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/OXGame.cs 패널트킥 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/PK.cs 그릇쌓기 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/Plate.cs 스쿼트 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/Squart.cs 랭킹 시스템 : https://github.com/beargrllys/DepthGame/blob/main/Assets/script/Rank.cs ","permalink":"https://beargrllys.github.io/project/depthgame/","summary":"개요 Kinect V2를 이용해 제작한 실감형 미니게임 콘텐츠 개발\n기본정보 개발인원 / 기간 3명(기획1, 개발1, 디자인1) / 21.10~21.12(3개월) 개발 환경 Unity3D, Kinect V2 SDK, Window 기능 Unity3D 시스템 / Body Tracking / Kinect 디바이스 연동 / Firebase를 이용한 랭크 시스템 역할 / 기여도 메인 개발자 / 40% 개발 목적 교내 프로젝트, GGC 게임컨테스트 출품용 아이디어 기획자와 디자이너와 브레인스토밍을 통해 미니게임 모음집 아이디어로 의견을 모으고 구현가능한 다양한 게임들을 기획했습니다. 이후 개발난이도를 분류하고 1주 1게임을 목표로 기한 내에 최대한 많은 게임이 확보되도록 계획을 수립했습니다.","title":"DepthGame"},{"content":"\rUnity 개발자, 윤지상입니다. Introduce 한양대 ERICA ICT융합학부/소프트웨어학부 컴퓨터 전공 다중전공 4학년 재학중이며, (주)일리소프트 초기 창업 멤버로 지금까지 메인 개발자로 일하고 있습니다. 융합학과 특유의 유연함으로 창업팀에서 다양한 프로젝트를 진행한 경험이 있습니다.\nMaking이 좋고 더 나은 Maker가 되기 위해 노력합니다. 어려운 문제에 부딪히더라도 문제를 어떻게든 해결하는 과정을 즐깁니다. Unity 클라이언트 프로그래밍을 주로 해왔고 IOT 서비스 개발에 관심이 많으며 최근에는 C/C++을 이용한 서버 프로그래밍을 공부하고 있습니다.\n융합학부에서 개발자를 꿈꾸며 소프트웨어 개발자 이외에도 디자인/기획/공학 분야의 사람들과 커뮤니케이션하고 유연하게 대처할수 있습니다. 프로젝트는 혼자 이끌어 갈수 없다는 것을 알기에, 같이 일하는 사람이 누구든 원만하게 프로젝트에 참여할 수 있습니다.\nHistory 2017.03 ~ 현재 : 한양대학교 ERICA 캠퍼스 ICT융합학부 미디어테크놀로지 전공 2018.06 ~ 2018.09 : (주)마블러스 개발자 인턴 2018.10 ~ 2020.08 : 대한민국 해군 전산병 복무 2021.03 ~ 현재 : 한양대학교 ERICA 캠퍼스 소프트웨어학부 컴퓨터 전공 2020.07 ~ 현재 : (주)일리소프트 스타트업 co-founder Skill Unity : C/C++ Dev : Unreal engine : Socket Programming : Go Backend : Flutter : Nginx : Major Projects 프로젝트 이름 Skill 바로가기 오픈소스기반 MVP 개발 – \u0026ldquo;Shine your shop\u0026rdquo; Product, RaspberryPi 바로가기 HY3D 진로스티커북 외주제작 Unity / Vuforia 바로가기 그린테크롤 AR 양치교육어플 Unity / ARFoundation 바로가기 드림큐브 Unity / Vuforia 바로가기 Depth Game Unity / Kinect v2 바로가기 커넥티드 식물재배기 Product, RaspberryPi 바로가기 ","permalink":"https://beargrllys.github.io/posts/profiles/","summary":"Unity 개발자, 윤지상입니다. Introduce 한양대 ERICA ICT융합학부/소프트웨어학부 컴퓨터 전공 다중전공 4학년 재학중이며, (주)일리소프트 초기 창업 멤버로 지금까지 메인 개발자로 일하고 있습니다. 융합학과 특유의 유연함으로 창업팀에서 다양한 프로젝트를 진행한 경험이 있습니다.\nMaking이 좋고 더 나은 Maker가 되기 위해 노력합니다. 어려운 문제에 부딪히더라도 문제를 어떻게든 해결하는 과정을 즐깁니다. Unity 클라이언트 프로그래밍을 주로 해왔고 IOT 서비스 개발에 관심이 많으며 최근에는 C/C++을 이용한 서버 프로그래밍을 공부하고 있습니다.\n융합학부에서 개발자를 꿈꾸며 소프트웨어 개발자 이외에도 디자인/기획/공학 분야의 사람들과 커뮤니케이션하고 유연하게 대처할수 있습니다.","title":"Profiles"}]